// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: rootProject.file('config/hooks/install-git-hooks.gradle')

buildscript {
  ext.versions = ['minSdk'        : 14,
                  'compileSdk'    : 25,
                  'buildTools'    : '26.0.2',

                  'supportLibrary': '25.3.1',]

  ext.deps = [findbugs       : 'com.google.code.findbugs:jsr305:2.0.1',
              junit          : 'junit:junit:4.12',
              easymock       : 'org.easymock:easymock:3.4',
              rxjava         : 'io.reactivex:rxjava:1.3.4',
              rxjava2        : 'io.reactivex.rxjava2:rxjava:2.1.6',
              rxbinding      : 'com.jakewharton.rxbinding:rxbinding:1.0.1',
              rxbinding2     : 'com.jakewharton.rxbinding2:rxbinding:2.0.0',

              'support'      : ['compat': "com.android.support:support-compat:${versions.supportLibrary}",
                                'design': "com.android.support:design:${versions.supportLibrary}",],]

  repositories {
    google()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.0'
    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
  }
}

allprojects {
  apply plugin: 'jacoco'
  repositories {
    jcenter()
  }

  ext {
    // plugin for all (checkstyle, pmd and findbugs)
    quality_gradle_java_file = "config/quality_java.gradle"
    quality_gradle_android_file = "config/quality_android.gradle"

    // config files
    pmd_rulesetFile = "${project.rootDir}/config/pmd/pmd-ruleset.xml"
    findbugs_excludeFile = "${project.rootDir}/config/findbugs/excludeFilter.xml"
  }
}

subprojects { project ->
  group = GROUP
  version = VERSION_NAME
}

//https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac
task jacocoTestReport(type: JacocoReport) {
  sourceDirectories = files()
  classDirectories = files()
  executionData = files()

  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }

  // Work-around to allow us to build list of executionData files in doFirst
  onlyIf = {
    true
  }

  /*
   * Builds list of source dirs, class dirs, and executionData files
   * when task is run, not at script evaluation time
   */
  doFirst {
    subprojects.findAll { subproject ->
      //we care only if the project is a library and is a rx2 implementation
      !subproject.pluginManager.hasPlugin('com.android.application') && !subproject.name.endsWith("rx")
    }.each { subproject ->
      additionalSourceDirs files((Set<File>) subproject.sourceSets.main.allJava.srcDirs)
      additionalClassDirs((FileCollection) subproject.sourceSets.main.output)
      if (subproject.pluginManager.hasPlugin('jacoco')) {
        executionData subproject.tasks.jacocoTestReport.executionData
      }
    }

    executionData = files(executionData.findAll {
      it.exists()
    })
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

